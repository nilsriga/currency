// Import necessary functions and types from Redux Toolkit and axios
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';

// Define the structure of a Rate object
interface Rate {
  id: number; // Unique identifier for the rate
  date: string; // Date the rate was retrieved
  rate: string; // Exchange rate value
}

// Define the structure of the currency state
interface CurrencyState {
  rates: Record<string, Record<number, Rate[]>>; // Nested object to store rates by currency and page
  selectedCurrency: string; // Currently selected currency
  currentPage: number; // Current page number
  totalPages: number; // Total number of pages
  error: string | null; // Error message, if any
}

// Define the initial state of the currency slice
const initialState: CurrencyState = {
  rates: {}, // Initialize rates as an empty object
  selectedCurrency: 'usd', // Default selected currency
  currentPage: 1, // Default current page
  totalPages: 1, // Default total pages
  error: null, // No error initially
};

// Define an async thunk to fetch currency rates from an API
export const fetchRates = createAsyncThunk(
  'currency/fetchRates',
  async ({ currency, page }: { currency: string; page: number }) => {
    const response = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/currency/${currency}?page=${page}&limit=10`);
    return { data: response.data.data as Rate[], currency, page, totalPages: response.data.totalPages };
  }
);

// Create a slice for currency-related state and actions
const currencySlice = createSlice({
  name: 'currency', // Name of the slice
  initialState, // Initial state of the slice
  reducers: {
    // Reducer to set the selected currency
    setSelectedCurrency: (state, action: PayloadAction<string>) => {
      state.selectedCurrency = action.payload;
      state.currentPage = 1; // Reset to the first page when currency changes
    },
    // Reducer to set the current page
    setPage: (state, action: PayloadAction<number>) => {
      state.currentPage = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      // Handle the fulfilled state of the fetchRates async thunk
      .addCase(fetchRates.fulfilled, (state, action) => {
        const { data, currency, page, totalPages } = action.payload;
        if (!state.rates[currency]) {
          state.rates[currency] = {};
        }
        state.rates[currency][page] = data;
        state.totalPages = totalPages;
        state.error = null; // Clear any previous error
      })
      // Handle the rejected state of the fetchRates async thunk
      .addCase(fetchRates.rejected, (state) => {
        state.error = 'Failed to fetch currency data.';
      });
  },
});

// Export the actions generated by the slice
export const { setSelectedCurrency, setPage } = currencySlice.actions;

// Export the reducer to be used in the Redux store
export default currencySlice.reducer;
